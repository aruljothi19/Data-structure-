#include <stdio.h>
#include <stdlib.h>

struct poly {
    int coeff;
    int pow;
    struct poly *Next;
};
typedef struct poly Poly;

void Create(Poly *List);
void Display(Poly *List);
void Addition(Poly *Poly1, Poly *Poly2, Poly *Result);
void Subtraction(Poly *Poly1, Poly *Poly2, Poly *Result);
void Multiplication(Poly *Poly1, Poly *Poly2, Poly *Result);

int main() {
    Poly *Poly1 = malloc(sizeof(Poly));
    Poly *Poly2 = malloc(sizeof(Poly));
    Poly *Result = malloc(sizeof(Poly));
    Poly1->Next = NULL;
    Poly2->Next = NULL;
    Result->Next = NULL;

    int choice;
    do {
        printf("\n1. Addition");
        printf("\n2. Subtraction");
        printf("\n3. Multiplication");
        printf("\n4. Exit");
        printf("\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("\nEnter the values for first polynomial :\n");
                Create(Poly1);
                printf("The polynomial equation is : ");
                Display(Poly1);

                printf("\nEnter the values for second polynomial :\n");
                Create(Poly2);
                printf("The polynomial equation is : ");
                Display(Poly2);

                Addition(Poly1, Poly2, Result);
                printf("\nThe polynomial equation addition result is : ");
                Display(Result);
                break;

            case 2:
                printf("\nEnter the values for first polynomial :\n");
                Create(Poly1);
                printf("The polynomial equation is : ");
                Display(Poly1);

                printf("\nEnter the values for second polynomial :\n");
                Create(Poly2);
                printf("The polynomial equation is : ");
                Display(Poly2);
                Subtraction(Poly1, Poly2, Result);
                printf("\nThe polynomial equation subtraction result is : ");
                Display(Result);
                break;

            case 3:
                printf("\nEnter the values for first polynomial :\n");
                Create(Poly1);
                printf("The polynomial equation is : ");
                Display(Poly1);

                printf("\nEnter the values for second polynomial :\n");
                Create(Poly2);
                printf("The polynomial equation is : ");
                Display(Poly2);

                Multiplication(Poly1, Poly2, Result);
                printf("\nThe polynomial equation multiplication result is : ");
                Display(Result);
                break;

            case 4:
                printf("\nExiting program...");
                break;

            default:
                printf("\nInvalid choice! Please enter a valid option.");
        }
    } while (choice != 4);


    Poly *temp;
    while (Poly1 != NULL) {
        temp = Poly1;
        Poly1 = Poly1->Next;
        free(temp);
    }
    while (Poly2 != NULL) {
        temp = Poly2;
        Poly2 = Poly2->Next;
        free(temp);
    }
    while (Result != NULL) {
        temp = Result;
        Result = Result->Next;
        free(temp);
    }

    return 0;
}
void Create(Poly *List) {
    int choice;
    Poly *Position, *NewNode;
    Position = List;
    do {
        NewNode = malloc(sizeof(Poly));
        printf("Enter the coefficient : ");
        scanf("%d", &NewNode->coeff);
        printf("Enter the power : ");
        scanf("%d", &NewNode->pow);
        NewNode->Next = NULL;
        Position->Next = NewNode;
        Position = NewNode;
        printf("Enter 1 to continue : ");
        scanf("%d", &choice);
    } while(choice == 1);
}

void Display(Poly *List) {
    Poly *Position;
    Position = List->Next;
    while(Position != NULL) {
        printf("%dx^%d", Position->coeff, Position->pow);
        Position = Position->Next;
        if(Position != NULL && Position->coeff > 0) {
            printf("+");
        }
    }
}
void Addition(Poly *Poly1, Poly *Poly2, Poly *Result) {
    Poly *Position;
    Poly *NewNode;
    Poly1 = Poly1->Next;
    Poly2 = Poly2->Next;
    Result->Next = NULL;
    Position = Result;

    while(Poly1 != NULL && Poly2 != NULL) {
        NewNode = malloc(sizeof(Poly));
        if(Poly1->pow == Poly2->pow) {
            NewNode->coeff = Poly1->coeff + Poly2->coeff;
            NewNode->pow = Poly1->pow;
            Poly1 = Poly1->Next;
            Poly2 = Poly2->Next;
        } else if(Poly1->pow > Poly2->pow) {
            NewNode->coeff = Poly1->coeff;
            NewNode->pow = Poly1->pow;
            Poly1 = Poly1->Next;
        } else if(Poly1->pow < Poly2->pow) {
            NewNode->coeff = Poly2->coeff;
            NewNode->pow = Poly2->pow;
            Poly2 = Poly2->Next;
        }
        NewNode->Next = NULL;
        Position->Next = NewNode;
        Position = NewNode;
    }

    while(Poly1 != NULL || Poly2 != NULL) {
        NewNode = malloc(sizeof(Poly));
        if(Poly1 != NULL) {
            NewNode->coeff = Poly1->coeff;
            NewNode->pow = Poly1->pow;
            Poly1 = Poly1->Next;
        }
        if(Poly2 != NULL) {
            NewNode->coeff = Poly2->coeff;
            NewNode->pow = Poly2->pow;
            Poly2 = Poly2->Next;
        }
        NewNode->Next = NULL;
        Position->Next = NewNode;
        Position = NewNode;
    }
}
void Subtraction(Poly *Poly1, Poly *Poly2, Poly *Result) {
    Poly *Position;
    Poly *NewNode;
    Poly1 = Poly1->Next;
    Poly2 = Poly2->Next;
    Result->Next = NULL;
    Position = Result;

    while(Poly1 != NULL && Poly2 != NULL) {
        NewNode = malloc(sizeof(Poly));
        if(Poly1->pow == Poly2->pow) {
            NewNode->coeff = Poly1->coeff - Poly2->coeff;
            NewNode->pow = Poly1->pow;
            Poly1 = Poly1->Next;
            Poly2 = Poly2->Next;
        } else if(Poly1->pow > Poly2->pow) {
            NewNode->coeff = Poly1->coeff;
            NewNode->pow = Poly1->pow;
            Poly1 = Poly1->Next;
        } else if(Poly1->pow < Poly2->pow) {
            NewNode->coeff = -(Poly2->coeff);
            NewNode->pow = Poly2->pow;
            Poly2 = Poly2->Next;
        }
        NewNode->Next = NULL;
        Position->Next = NewNode;
        Position = NewNode;
    }

    while(Poly1 != NULL || Poly2 != NULL) {
        NewNode = malloc(sizeof(Poly));
        if(Poly1 != NULL) {
            NewNode->coeff = Poly1->coeff;
            NewNode->pow = Poly1->pow;
            Poly1 = Poly1->Next;
        }
        if(Poly2 != NULL) {
            NewNode->coeff = -(Poly2->coeff);
            NewNode->pow = Poly2->pow;
            Poly2 = Poly2->Next;
        }
        NewNode->Next = NULL;
        Position->Next = NewNode;
        Position = NewNode;
    }
}
void Multiplication(Poly *Poly1, Poly *Poly2, Poly *Result) {
    Poly *Position;
    Poly *NewNode;
    Poly1 = Poly1->Next;
    Poly2 = Poly2->Next;
    Result->Next = NULL;
    Position = Result;

    while(Poly1 != NULL) {
        Poly *tempPoly2 = Poly2;
        while(tempPoly2 != NULL) {
            NewNode = malloc(sizeof(Poly));
            NewNode->coeff = Poly1->coeff * tempPoly2->coeff;
            NewNode->pow = Poly1->pow + tempPoly2->pow;
            NewNode->Next = NULL;


            if(Position->Next == NULL) {
                Position->Next = NewNode;
            } else {
                Poly *tempResult = Position;
                while(tempResult->Next != NULL && tempResult->Next->pow > NewNode->pow) {
                    tempResult = tempResult->Next;
                }
                if(tempResult->Next != NULL && tempResult->Next->pow == NewNode->pow) {
                    tempResult->Next->coeff += NewNode->coeff;
                    free(NewNode);
                } else {
                    NewNode->Next = tempResult->Next;
                    tempResult->Next = NewNode;
                }
            }
            tempPoly2 = tempPoly2->Next;
        }
        Poly1 = Poly1->Next;
    }
}
