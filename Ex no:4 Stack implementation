#include <stdio.h>

#include <stdlib.h>

struct Node {

    int data;

    struct Node* next;

};

#define MAX_SIZE 100

int stack_array[MAX_SIZE];

int top_array = -1;



void push_array(int element);

int pop_array();

int peek_array();

void display_array();



struct Node* top_linked = NULL;



void push_linked(int element);

int pop_linked();

int peek_linked();

void display_linked();



int main() {

    int choice, element;



    do {

        printf("\n1. Push an element");

        printf("\n2. Pop an element");

        printf("\n3. Return the top element");

        printf("\n4. Display elements");

        printf("\n5. Exit");

        printf("\nEnter your choice: ");

        scanf("%d", &choice);



        switch (choice) {

            case 1:

                printf("\nEnter the element to push: ");

                scanf("%d", &element);

                push_array(element);

                push_linked(element);

                break;

            case 2:

                printf("\nPopped element from array: %d", pop_array());

                printf("\nPopped element from linked list: %d", pop_linked());

                break;

            case 3:

                printf("\nTop element in array: %d", peek_array());

                printf("\nTop element in linked list: %d", peek_linked());

                break;

            case 4:

                printf("\nElements in array: ");

                display_array();

                printf("\nElements in linked list: ");

                display_linked();

                break;

            case 5:

                printf("\nExiting program...");

                exit(0);

                break;

            default:

                printf("\nInvalid choice! Please enter a valid option.");

        }

    } while (choice != 5);



    return 0;

}



// Array implementation functions

void push_array(int element) {

    if (top_array == MAX_SIZE - 1) {

        printf("\nStack Overflow! Cannot push element.");

        return;

    }

    stack_array[++top_array] = element;

}



int pop_array() {

    if (top_array == -1) {

        printf("\nStack Underflow! Cannot pop element.");

        return -1;

    }

    return stack_array[top_array--];

}



int peek_array() {

    if (top_array == -1) {

        printf("\nStack is empty!");

        return -1;

    }

    return stack_array[top_array];

}



void display_array() {

    if (top_array == -1) {

        printf("Stack is empty!");

        return;

    }

    for (int i = top_array; i >= 0; i--) {

        printf("%d ", stack_array[i]);

    }

}



// Linked list implementation functions

void push_linked(int element) {

    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));

    if (newNode == NULL) {

        printf("\nMemory allocation failed! Cannot push element.");

        return;

    }

    newNode->data = element;

    newNode->next = top_linked;

    top_linked = newNode;

}

int pop_linked() {

    if (top_linked == NULL) {

        printf("\nStack Underflow! Cannot pop element.");

        return -1;

    }

    int data = top_linked->data;

    struct Node* temp = top_linked;

    top_linked = top_linked->next;

    free(temp);

    return data;

}



int peek_linked() {

    if (top_linked == NULL) {

        printf("\nStack is empty!");

        return -1;

    }

    return top_linked->data;

}



void display_linked() {

    if (top_linked == NULL) {

        printf("Stack is empty!");

        return;

    }

    struct Node* current = top_linked;

    while (current != NULL) {

        printf("%d ", current->data);

        current = current->next;

    }

}
