#include <stdio.h>

#include <stdlib.h>

#include <string.h>

// Define the structure for the linked list node

typedef struct Node {

 int key;

 int value;

 struct Node* next;

} Node;

// Define the structure for the hash table

typedef struct HashTable {

 int size;

 Node** table;

} HashTable;

// Create a new node

Node* createNode(int key, int value) {

 Node* newNode = (Node*)malloc(sizeof(Node));

 newNode->key = key;

 newNode->value = value;

 newNode->next = NULL;

 return newNode;

}

// Create a hash table

HashTable* createTable(int size) {

 HashTable* newTable = (HashTable*)malloc(sizeof(HashTable));
newTable->size = size;

 newTable->table = (Node**)malloc(sizeof(Node*) * size);

 for (int i = 0; i < size; i++) {

 newTable->table[i] = NULL;

 }

 return newTable;

}

// Hash function

int hashFunction(int key, int size) {

 return key % size;

}

// Insert a key-value pair into the hash table

void insert(HashTable* hashTable, int key, int value) {

 int hashIndex = hashFunction(key, hashTable->size);

 Node* newNode = createNode(key, value);

 newNode->next = hashTable->table[hashIndex];

 hashTable->table[hashIndex] = newNode;

}

// Search for a value by key in the hash table

int search(HashTable* hashTable, int key) {

 int hashIndex = hashFunction(key, hashTable->size);

 Node* current = hashTable->table[hashIndex];

 while (current != NULL) {

 if (current->key == key) {

 return current->value;

 }
current = current->next;

 }

 return -1; // Indicates that the key was not found

}

// Delete a key-value pair from the hash table

void delete(HashTable* hashTable, int key) {

 int hashIndex = hashFunction(key, hashTable->size);

 Node* current = hashTable->table[hashIndex];

 Node* prev = NULL;

 while (current != NULL && current->key != key) {

 prev = current;

 current = current->next;

 }

 if (current == NULL) {

 // Key not found

 return;

 }

 if (prev == NULL) {

 // Node to delete is the first node in the list

 hashTable->table[hashIndex] = current->next;

 } else {

 prev->next = current->next;

 }

 free(current);

}

// Free the hash table

void freeTable(HashTable* hashTable) {
for (int i = 0; i < hashTable->size; i++) {

 Node* current = hashTable->table[i];

 while (current != NULL) {

 Node* temp = current;

 current = current->next;

 free(temp);

 }

 }

 free(hashTable->table);

 free(hashTable);

}

// Main function to demonstrate the hash table operations

int main() {

 HashTable* hashTable = createTable(10);

 insert(hashTable, 1, 10);

 insert(hashTable, 2, 20);

 insert(hashTable, 12, 30);

 printf("Value for key 1: %d\n", search(hashTable, 1));

 printf("Value for key 2: %d\n", search(hashTable, 2));

 printf("Value for key 12: %d\n", search(hashTable, 12));

 printf("Value for key 3: %d\n", search(hashTable, 3)); // Key not present

 delete(hashTable, 2);

 printf("Value for key 2 after deletion: %d\n", search(hashTable, 2));

 freeTable(hashTable);
return 0;

}
